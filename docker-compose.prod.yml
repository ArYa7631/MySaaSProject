version: '3.8'

services:
  # Frontend Application (Production)
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://aryasoftwaretech.com/api/v1
        - NEXT_PUBLIC_APP_URL=https://aryasoftwaretech.com
    environment:
      - NODE_ENV=production
      # Use relative URLs for multi-tenant setup (supports multiple domains)
      - NEXT_PUBLIC_API_URL=https://aryasoftwaretech.com/api/v1
      - NEXT_PUBLIC_APP_URL=https://aryasoftwaretech.com
    networks:
      - mysaasproject-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (Production)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/mysaasproject_production
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION}
      - S3_IMAGE_FOLDER_PATH=images
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mysaasproject-network
    volumes:
      - ./apps/backend/public/uploads:/app/public/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mysaasproject_production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mysaasproject-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - mysaasproject-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/logs:/var/log/nginx
      - ./nginx/webroot:/var/www/html
    depends_on:
      - frontend
      - backend
    networks:
      - mysaasproject-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d www.${DOMAIN}
    depends_on:
      - nginx
    networks:
      - mysaasproject-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mysaasproject-network:
    driver: bridge
